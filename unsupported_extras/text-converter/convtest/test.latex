\href{https://rampart.dev/}{\pandocbounded{\includegraphics[keepaspectratio]{https://rampart.dev/images/rampart_transparent_white.gif}}}

{}

\phantomsection\label{navbarCollapse}
\begin{itemize}
\tightlist
\item
  \href{https://rampart.dev/index.html}{Home}
\item
  \href{https://rampart.dev/download.html}{Download}
\item
  \href{https://rampart.dev/docs/}{Documentation}
\item
  \href{https://rampart.dev/demos.html}{Demos}
\item
  \href{https://rampart.dev/apps/site/contact.html}{Help!}
\end{itemize}

Search

\section{Squish the Stack}\label{squish-the-stack}

Rampart is a javascript based complete stack development environment
which is extremely resource stingy. This entire site is running on a
Raspberry Pi Zero (version 1). Rampart is also fast and portable; it
will run on nearly any *nix OS and benchmarks nearly as fast as Nginx on
static content. It\textquotesingle s also free to use, modify, and
redistribute in most use cases.

We\textquotesingle re not kidding about it being resource stingy.
Here\textquotesingle s the Rampart HTTP server running on my machine as
I\textquotesingle m coding this web page on an Intel Mac with almost all
of its modules loaded:

\pandocbounded{\includegraphics[keepaspectratio]{https://rampart.dev/images/ram_usage.jpg}}

\subsubsection{Full Text Search with
SQL}\label{full-text-search-with-sql}

We\textquotesingle ve licensed the same fulltext and relational database
engine that powered eBay\textquotesingle s auction search and
\href{https://www.thunderstone.com/about-us/our-customers/}{100\textquotesingle s
of other large sites} across the internet. The SQL engine is especially
good at serving database driven content. It is also realtime so that new
or changed documents are instantly searchable. We\textquotesingle ve
included a CSV parser so you can migrate data into it as well.

\href{https://rampart.dev/docs/rampart-sql.html}{more info...}

\subsubsection{HTTP, HTTPS, and
Websockets}\label{http-https-and-websockets}

Rampart\textquotesingle s HTTP/HTTPS server is based on a modded
libevhtp\_ws and libevent2. Benchmarks showed that libevhtp outperformed
Nginx (which we really respect), so that\textquotesingle s why we chose
it. We haven\textquotesingle t benchmarked it against Node yet but
it\textquotesingle s reasonable to assume we\textquotesingle ll keep
pace while consuming a lot less of the host\textquotesingle s resources

\href{https://rampart.dev/docs/rampart-server.html\#the-rampart-server-http-module}{more
info...}

\subsubsection{CURL Module}\label{curl-module}

Rampart provides a robust interface to the Curl library, giving you the
ability to fetch URLs, post forms, or send email and attachments easily.
It includes all the functionality you\textquotesingle ve come to expect
with the Curl command line utility, but from within Rampart JavaScript.
The combination of this module and the HTML Parser provide a fairly
robust data scraping tool set.

\href{https://rampart.dev/docs/rampart-curl.html}{more info...}

\subsubsection{Threading}\label{threading}

Rampart threads let you run functions not only asynchronously but in
also in a multi-threaded environment. Running a function in a thread is
as easy as running one in a {setTimeout()}. Each thread is run in its
own isolated JavaScript interpreter and variables are easily shared at
any time via a clipboard. Running an asynchronous callback in a thread
when a variable is copied to the clipboard
\href{https://rampart.dev/docs/rampart-thread.html\#rampart-thread-onget}{is
also possible}.

\href{https://rampart.dev/docs/rampart-thread.html}{more info...}

\subsubsection{REDIS Client}\label{redis-client}

We\textquotesingle ve included direct REDIS integration for all the
obvious reasons one might want to use it. We also crafted a
\href{https://rampart.dev/docs/rampart-redis.html\#xread-auto-async}{custom
XREAD command} to work like PUB/SUB so you can, in combination with
WebSockets, create chats, channels and DMs that don\textquotesingle t
require the extra step of saving, retrieving and sorting messages from a
message queue.

\href{https://rampart.dev/docs/rampart-redis.html}{more info...}

\subsubsection{Lightning Memory-mapped
Database}\label{lightning-memory-mapped-database}

LMDB is a fast, truly ACID compliant RAM based key-value store.
It\textquotesingle s read biased and serves binary or text data really
well. We\textquotesingle ve added automatic conversion to/from CBOR and
JSON to make it that much easier. It\textquotesingle s not as fast as
Redis when in full ACID mode, but then again it\textquotesingle ll never
lose data when Redis might. LMDB startup is relatively instant, even on
large databases, and it\textquotesingle s persistent to disk in case of
unexpected interruption.

\href{https://rampart.dev/docs/rampart-lmdb.html}{more info...}

\subsubsection{Markdown Engine}\label{markdown-engine}

The markdown engine uses the Cmark library to implement the
\href{https://commonmark.org}{CommonMark syntax}. This allows you to
efficiently convert to HTML on the server side and have symmetry with
the CommonMark client-side javascript module. This is handy for things
like blog entries, documentation, and CMS page markup. \emph{Note: We
intend to eventually build and use our own CMS using it.}

\href{https://rampart.dev/docs/rampart-cmark.html}{more info...}

\subsubsection{ROBOTS.TXT}\label{robots.txt}

Rampart gives you the power to crawl and scrape in a very flexible
manner. However, with great web crawlers come great responsibilities.
The ROBOTS.TXT module uses Google\textquotesingle s robots.txt code so
you can avoid abusing sites that do not wish to have portions of their
content crawled.

\href{https://rampart.dev/docs/rampart-robots.html}{more info...}

\subsubsection{HTML Parser}\label{html-parser}

Using a modded version of \href{https://www.html-tidy.org}{HTMLTidy}
Rampart provides the ability to manipulate and traverse HTML in a manner
somewhat akin to JQuery, but on the server side. This module can also
clean up and format messy or compacted HTML after it\textquotesingle s
been CURL\textquotesingle ed from somewhere. \emph{Note: I used this
module several times to locate errant imbalaced
\textless div\textgreater s when writing this site.}

\href{https://rampart.dev/docs/rampart-html.html}{more info...}

\subsubsection{Cryptography}\label{cryptography}

The OpenSSL library module provides the ability to safely encrypt and
decrypt stuff generate crypto-hashes, generate RSA key pairs, and more.
It also provides cryptographic quality random and Gaussian random number
generation. Sorry, it doesn\textquotesingle t generate crypto-currency
though. \emph{Note: for speedy non-crypographic hashing see the
\href{https://rampart.dev/docs/rampart-utils.html\#hash}{non-cryptographic
hashes}.}

\href{https://rampart.dev/docs/rampart-crypto.html}{more info...}

\subsubsection{Networking}\label{networking}

The rampart-net module provides access to low level, asynchronous TCP/IP
calls for creating client and server applications, as well as name
resolution. The functions are somewhat similar to node\textquotesingle s
net functions, which makes learning easier if you are familiar.

\href{https://rampart.dev/docs/rampart-net.html}{more info...}

\subsubsection{Python}\label{python}

Yes we embedded the c-python interpreter into a Rampart module. It
allows you to load python modules, run python scripts and manipulate
python variables in JavaScript without a writing a line of python. Why?
Python has a gazillion modules and support for many, many databases. If
you need functionality that Rampart doesn\textquotesingle t (yet)
provide, this can get your there. See
\href{https://rampart.dev/docs/rampart-python.html\#example-use-importing-data}{this
example} for a quick rundown of what is possible.

\href{https://rampart.dev/docs/rampart-python.html}{more info...}

\subsubsection{OS Utilities}\label{os-utilities}

All the common commands and functions required to manipulate files and
talk to the OS are in here \emph{(hopefully)}: {printf(), sprintf(),
fopen(), fread(), fwrite(), hexify(), dehexify(), trim(), stat(),
exec(), shell(), kill(), mkdir(), rmdir(), sleep()}... and a lot more.

\href{https://rampart.dev/docs/rampart-utils.html}{more info...}

\subsubsection{Fast HyperLogLog, non-crypto Hash, \&
Random}\label{fast-hyperloglog-non-crypto-hash-random}

We implemented our own super-fast
\href{https://en.wikipedia.org/wiki/HyperLogLog}{HyperLogLog} algorithm
for on-line counting of distinct things. e.g. unique IP addresses.
It\textquotesingle s substantially faster and more accurate than
Redis\textquotesingle s. Our HLL uses Google\textquotesingle s City Hash
algorithm internally, but we also expose City Hash and its cousin Murmur
Hash, as well as a fast pseudo random number generator based on
\href{https://en.wikipedia.org/wiki/Xorshift}{XorShift64}.

\href{https://rampart.dev/docs/rampart-utils.html\#rand-hash-and-hyperloglog}{more
info...}

\subsubsection{More to come}\label{more-to-come}

We\textquotesingle ve been working on assembling Rampart for a beta
release since the start of Covid. Some stuff hasn\textquotesingle t made
it into it yet, but we are continuing to add features and by no means
are we nearly done adding things. There are also
\href{https://rampart.dev/docs/tutorialtoc.html}{tutorials} and
\href{https://rampart.dev/docs/rampart-extras.html}{unsupported extras}
which can give you an idea of the direction we are heading.

\subsection{Why did we do this?}\label{why-did-we-do-this}

While NodeJS is extremely popular and NPM provides a ton of add-ons
quickly, on the whole it\textquotesingle s pretty fat. By the time you
configure MariaDB and Apache Lucene you\textquotesingle ve eaten a day
(or more) and a considerable amount of resources on the host machine.
Additionally, it\textquotesingle s not that much fun.

In creating Rampart we sought to create a "full stack" that was simple
and fast to download, configure, and start creating whatever application
you had in mind in a time frame measured in minutes rather than days.
User machines, phones, and IOT devices need to serve their primary role
without impediment. Rampart\textquotesingle s job is to support that
role and not get in the way. OTOH if you dedicate a machine or cluster
to a Rampart task you\textquotesingle ll get a lot more done with a lot
less investment.

We chose the DukTape javascript engine over the V8 engine because while
V8 is very fast, it\textquotesingle s also kind of a RAM and CPU pig.
Our philosophy was to do everything difficult or complex in C and let
javascript be the fun-glue. That way it really didn\textquotesingle t
matter what engine was chosen. Almost every module is coded in C as is
the DukTape interpreter. This makes everything extremely portable with a
minimum amount of fuss. We include the Babel transpiler to drag DukTape
into ECMAScript 2015+ land. Rampart checks at runtime if
you\textquotesingle ve changed anything and then transpiles
automatically behind the scenes.

\subsection{Who are we?}\label{who-are-we}

Moat Crossing Systems LLC, the makers of Rampart, is a couple of guys
who between them have developed software and applications that have
served many billions of pages of database backed content on the
internet. We had some summer help from a couple of Columbia students who
helped up keep tabs on the "current-think" and coded some of the OS
Utility functions. It all started in January of 2020 with a phone
conversation where we were bitching about how un-fun web development had
become, and how resource heavy everything seemed to be. A comment was
made that if we could full-text index Wikipedia and serve it up on a
Raspberry Pi Zero, then we\textquotesingle d have something unique that
people might want.
\href{https://rampart.dev/apps/site/run_demo.html?demo=wikipedia}{So
that\textquotesingle s what we did}.

We hope you will give this thing a try. Contact us
\href{https://rampart.dev/apps/site/contact.html}{here} or at if you
have questions or need help with something. Maybe later on
we\textquotesingle ll get more sophisticated with our support
infrastructure, but for now one of us will try to get back to you as
soon as possible.

\subsection{\texorpdfstring{\protect\hypertarget{the_bush}{}{The
Raspberry Bush}}{The Raspberry Bush}}\label{the-raspberry-bush}

Here\textquotesingle s a photo of our fancy server farm before it was
installed in a rack at the ISP. There\textquotesingle s four Pi Zeros
and two Pi 4s. The four Zeros are mirror copies of one another just in
case *stuff* happens. The two Pi 4\textquotesingle s allow us to do
development and builds a bit faster than the Zeros allow us. The "bush"
is proxied by an NginX server running on a fairly large old Xeon
machine. This made certificate managment and other things somewhat
easier on us.

\pandocbounded{\includegraphics[keepaspectratio]{https://rampart.dev/images/server_farm_sm.jpg}}

Please note that we have no particular bias towards producing software
principally for the Raspberry Pi. The whole purpose for its usage here
is to demostrate how much Rampart can do with minimimal resources. That
way you can extrapolate how fast and efficient it will be on larger
Intel, AMD, and ARM platforms.

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{         |\textgreater{}\textgreater{}            |\textgreater{}\textgreater{}}
\NormalTok{       \_\_|\_\_          \_\_|\_\_}
\NormalTok{      \textbackslash{}  |  /         \textbackslash{}   /}
\NormalTok{       | \^{} |          | \^{} |  }
\NormalTok{     \_\_| o |\_\_\_\_\_\_\_\_\_\_| o |\_\_   }
\NormalTok{    [\_\_|\_|\_\_|(rp)|  | |\_\_\_\_\_\_]}
\NormalTok{\_\_\_\_[|||||||||||||\_\_|||||||||]\_\_\_\_}
\end{Highlighting}
\end{Shaded}

RAMPART

© 2024 Moat Crossing Systems. All rights reserved.

\href{https://rampart.dev/apps/editor/?file=/apps/site.js}{View JS
Source}
