\chapter{Types of Searches in Metamorph}

\section{Multiple Search Algorithms}

The Metamorph Query Language allows for several methods of searching.
You can enter a natural language question.  You can specify which
words, phrases, or regular expressions you wish to look for, and your
search request will be processed accordingly.  To accomplish all this,
several different search algorithms are used which go about pattern
matching in different ways.  These are called up internally by
Metamorph.  The chief pattern matchers in use are:

\begin{description}
\item[SPM] Metamorph's Single Pattern Matcher
           (includes wildcarding, the `*' operator)
\item[PPM] Metamorph's Parallel Pattern Matcher
\item[REX] Metamorph's Regular EXpression Pattern Matcher
\item[XPM] Metamorph's ApproXimate Pattern Matcher
\item[NPM] Metamorph's Numeric Pattern Matcher
\end{description}

When you enter the most common kind of Metamorph search, a normal
English word, Metamorph calls \verb`SPM` or \verb`PPM`.  \verb`SPM`
handles the morpheme processing for root words which have no
equivalences; \verb`PPM` handles the root words with their lists of
equivalences expanded into sets of words.  Where there is only a
single word in a list (i.e., a root word which has no equivalences)
\verb`SPM` is used instead so as to optimize search speed.  \verb`PPM`
searches for every occurrence of every valid word form for each item
in a list in parallel, and will handle the multiple lists of words
created from a routine query.

\verb`PPM` and \verb`SPM` make it possible to routinely execute such
searches at tremendous speed, locating hits containing all
combinations of all items from each of these lists.

Entering words in English calls \verb`PPM` or \verb`SPM`; this is the
default and no special denotation is necessary.  You can make use of a
wildcard (\verb`*`) operator with English words if you wish.  Entering
``\verb`gorb*yelt`'' would locate ``\verb`Gorbachev had a meeting with Yeltsin`''.
The asterisk (\verb`*`) will locate up to 80 characters
per asterisk noted.

\verb`REX` makes it possible to look for fixed or variable length
regular expressions of any kind and is integrated into the Metamorph
search routine so that you can mix and match words and regular
expressions.  You signal \verb`REX` by putting a a forward slash
(\verb`/`) in front of the word or expression, and \verb`REX` will be
called by Metamorph to handle that string, utilizing all the rules of
\verb`REX` syntax.

\verb`XPM` allows you to specify an ``almost right'' pattern which you
are unsure of, so that you can find approximately what you have
specified.  \verb`XPM` is also integrated into the search procedure
and can be mixed in with \verb`PPM` word searches and \verb`REX`
regular expressions; you signal \verb`XPM` with a percent sign
(\verb`%`) denoting the percentage of proximity to the entered pattern
you desire.

\verb`NPM` allows you to look for numeric quantities in text which may
have been expressed in English.  \verb`NPM` does number crunching
through all possible numbers found in the text to locate those numbers
which are in the specified range of desired numbers.  It is generally
used in combination with some other search item, such as a unit.
\verb`NPM` is signalled with a pound sign (\verb`#`) preceding the
numeric quantity you wish to match.

The heart of Metamorph's ability to encompass so many functions and
subroutines so effectively, in a way which produces quick results for
the user in acceptable response time, is its exceedingly fast search
algorithms.  Other bodies of technology have attempted to create small
replicas of a few of the functions in Metamorph, but none of this can
be successful if it cannot be done fast enough to get plentiful and
accurate search results.

Metamorph on its own has been benchmarked on some fast Unix machines
at around 4.5 million characters per second internal throughput rate.
The speed and accuracy of the pattern matching techniques employed
make possible Metamorph's versatile and flexible operation.

\section{The Natural Language Question}

The natural language question is an easy way to phrase a search query,
where the APICP flag \verb`keepnoise` has been left off.  Type in a
question which contains the elements you are looking for in the text.
There are really only these few rules to keep in mind.

\begin{itemize}
\item Use only the important words in your query.  Metamorph assumes every
      important concept in your question must be matched to qualify it as a hit.
\item Pronouns are meaningless to Metamorph; rephrase them as the nouns that they
      actually represent.
\item Idiomatic expressions should be avoided if possible, unless they are
      legitimately important to the sense of the question.  Metamorph may or may
      not be aware of the true meaning of such a phrase.
\end{itemize}

     An example of a ``good'' question to ask would be:
\begin{verbatim}
     Have there been any corporate takeovers?
\end{verbatim}
     An example of a less desirable question would be:
\begin{verbatim}
     What information is there on corporate takeovers?
\end{verbatim}
     The reason is that in this second question, the concept ``\verb`information`''
must be stated in the text along with the concept ``\verb`corporate`'' and
``\verb`takeover`'' to be considered a match, probably excluding relevant responses;
any hit from a news article is implicitly understood to be information without
so stating.  All you really need are the two important concepts ``\verb`corporate`''
and ``\verb`takeover`''.

     Another ``good'' question might be:
\begin{verbatim}
     Were there any corporate takeovers in Germany?
\end{verbatim}
     or
\begin{verbatim}
     Have there been any power struggles in the Near East?
\end{verbatim}

Where idiomatic expressions or phrases exist as entries in the
Equivalence File, they will be meaningfully processed as a whole,
whether so marked or not.  The question parser will check for phrase
entries in an entered query.  If the word grouping is not known to be
a phrase, the words will be processed separately, according to their
individual associations.  If it is important to you that the words of
such an expression or phrase be processed as one unit and Metamorph
does not recognize it as such, mark it as a phrase by putting it in
quotes.

Once your question is entered, the question parser will select the
important words and denote them as root words, to be expanded into
sets from the known associations in the Equivalence File.  These words
and all their equivalences are in the main passed to \verb`PPM` to be
searched for simultaneously while determining where answers to your
question might lie.

As a rule, unless escaped with a backslash (\verb`\`), hyphens are
stripped from the words on the query line before expanded to include
their associations in the Equivalence File and sent to the search
engine.  Once passed to \verb`PPM` or \verb`SPM` occurrences of those
words as separated by either hyphens or white space will be located.


\section{Single/Multiple Items, Keywords, Phrases, Wildcard Patterns (*)}

It isn't required that you ask a question.  Any search item can be
entered on the query line.  The simplest search would be to enter one
keyword, like ``\verb`bear`''.  All matches containing just the word
\verb`bear` (subject to morpheme processing, if turned on) will
be retrieved.

Equivalences (from the thesaurus) for query words may also be searched
for, in one of two ways.  First, equivalences can be turned on for {\em
all} terms by setting \verb`keepeqvs` (Vortex/\verb`tsql`) or
\verb`Synonyms` (Search Appliance) on.  Second, equivalences can be
toggled (reverse the \verb`keepeqvs` setting) for {\em individual}
query terms with the tilde (``\verb`~`'') operator.\footnote{Both of
these actions are subject to enabling by the \verb`alequivs` setting
in Vortex/\verb`tsql`.}

For example, with default settings\footnote{In the Metamorph API
(unlike Vortex, \verb`tsql` and the Search Appliance) equivalences are
on by default, so the following actions would be the opposite of what
is described.} (\verb`keepeqvs` off), the query ``\verb`~bear arms`''
will find all equivalences to the word ``\verb`bear`'' -- i.e.
``\verb`cub`'', ``\verb`endure`'', ``\verb`carry`'' etc. -- but only
the single term ``\verb`arms`''.  If we turned \verb`keepeqvs` on, the
exact same query would find only the single word ``\verb`bear`''
(tilde now toggles equivs to off) but all equivalences for the word
``\verb`arms`''.

\label{`MetamorphParenSet'}
  To look for a specific set of equivalences for a keyword -- instead
of equivalences derived from the thesaurus -- enter them in
parentheses, separated by commas (with no spaces).  E.g. ``{\tt
(bolt,fastener,screw)}'' would find any of ``\verb`bolt`'',
``\verb`fastener`'', or ``\verb`screw`''.  Note that wildcards (see
below) are disabled in parenthetical lists, however morpheme
processing is still done if turned on.

Entering more than one keyword on the query line will be interpreted
as 2 search items, as delimited by a space character, unless it is a
phrase known by the Equivalence File.  To link any words together as a
phrase you need only put it in quotes.  For example, ``\verb`Alabama
Representative`'' must find those two words in that sequence, as a
phrase.  Such a phrase can be entered as a new entry in the
Equivalence File, and specific names of Alabama Representatives could
be associated as a set.  Thereafter the quotes would not be required
on the query line for it to be processed as a single search item.

A wildcard `\verb`*`' can be used along with an English word to extend
a rooted pattern by up to 80 characters per asterisk `\verb`*`'.  For
example, ``\verb`Pres*Bush`'' would locate ``\verb`President George
Bush`''.  More than one asterisk `\verb`*`' may be used.  Such an item
which includes an asterisk is matched by a special operator which is
part of \verb`SPM`, the Single Pattern Matcher which looks for single
items.

A wildcarded item can be searched for in intersection with other
search items as well.  For example:  ``\verb`Pres*Reagan campaign`''
would locate the sentence ``{\em {\bf President Ronald Reagan} won the
{\bf election} in November.}''

A wildcard operator `\verb`*`' means just that:  ``anything'' before
of after the string to which it is rooted.  If you occasionally find
that the morpheme processing rules for a given word are not treating
it correctly, you can substitute a wildcard to locate the word in a
different way.  Even though ``\verb`property`'' will also find
``\verb`properties`'' through morpheme processing, ``\verb`prop*`''
will find the word ``\verb`properties`'' for different reasons.
``\verb`prop*`'' will also find ``\verb`proper`'' and
``\verb`propane`'', which morpheme processing would intelligently
exclude.

\section{Intelligent Intersection Search}

The intelligent intersection search is used to locate logical
intersections of equivalence sets within defined textual delimiters, a
sentence being a good default to use for a context weighted
application.

Where the APICP flag \verb`keepnoise` has been turned on, Metamorph is
directed to keep all words entered as part of the query whether noise
or not.  With noise words being retained as search words, remember not
to use extraneous words or punctuation unless it is meant to be part
of a designated search item.  The same type of search is being used
where noise is being filtered out, but applied only to the non-noise
words.

Specify the words you want to look for in your query, separated by
space.  No punctuation or other designation is required.  In this
query:

\begin{verbatim}
     life death disease
\end{verbatim}
you will get hits containing intersections of occurrences from the ``\verb`life`'',
``\verb`death`'', and ``\verb`disease`'' equivalence sets as well as the morphological
constructs connected with those words.

You are signalling the program to look for intersections of each of
the sets you have specified on the query line.  If not otherwise
marked this indicates a \verb`PPM` search (or \verb`SPM` search if
there are no equivalences) where Metamorph's set logic, morpheme
processing, equivalence handling, and so forth is called for, for each
of the words you enter on the line as delimited by spaces.  Preceding
a word with a tilde (\verb`~`) signifies you want the root word only
without equivalences, calling \verb`SPM`.

You can also specify a \verb`REX` expression by preceding it with a
forward slash (\verb`/`), or an \verb`XPM` expression by preceding it
with a percent sign (\verb`%`), or an \verb`NPM` expression by
preceding it with a pound sign (\verb`#`), or a phrase by putting it
in quotes, or a wildcard pattern by appending or preceding a word with
an asterisk (\verb`*`).  Each such entry, as well as words, terms or
acronyms, as delimited by spaces, will be understood as a separate set
for which intelligent intersections will be looked for.  Logic
operators plus (\verb`+`) or minus (\verb`-`) can be assigned to any
of these search item sets.


\section{String Search (Literal Pattern Match)}

To get Metamorph to do a literal string (pattern matching) search type
a slash `\verb`/`' preceding the string.  If you want to enter a whole
line to be viewed as one string, put it in quotes, with the forward
slash inside the quotes.  Example:

\begin{verbatim}
     "/Uncle Sam's soldiers"
\end{verbatim}

This query will go and get each place in the textfiles being queried
where that phrase is located, exactly as entered.  Anything to the
right of the slash, including a space before the word if you enter it
so, will be considered part of the string; so don't enter a period or
a space unless you want to look for one.

In the above example, ``\verb`Uncle Sam's soldiers`'', you would get
the same result whether a slash was entered or not, since there are no
known equivalences for the phrase ``\verb`Uncle Sam's soldiers`''.
However, if you compare the following:

\begin{verbatim}
     "/frame of mind"   (as compared to)  "frame of mind"
\end{verbatim}

you will see that the Equivalence File has some equivalences
associated with the phrase ``\verb`frame of mind`''.  To cut off those
equivalences and just look for the pattern ``\verb`frame of mind`''
you could insert the forward slash (\verb`/`) as the first character
of the phrase inside the quotes. (You could accomplish the same
thing more efficiently by preceding the phrase with a tilde \verb`~`.)

When you denote a slash (\verb`/`), remember that you're signalling
the Metamorph Engine to use \verb`REX`, bypassing the usual English
word processing that goes on where \verb`PPM` is the algorithm most
often in use.  \verb`REX` can sometimes be more direct when such a
task is all that is required.

While you can use a forward slash (\verb`/`) in front of any fixed
length pattern as is herein discussed, \verb`REX` has many more uses
which involve special characters.  If such characters are part of your
string and are therefore being inappropriately interpreted, use the
backslash (\verb`\`) to escape those characters inside your string;
e.g., ``\verb`43\.4`'' would indicate a literal decimal point
(\verb`.`), rather than its special meaning inside a \verb`REX`
expression.

\section{Fixed and Variable Length Regular Expressions (REX)}

\subsection{REX Description}

REX stands for Regular EXpression Pattern Matcher.  \verb`REX` gives
you the ability to match ranges of characters, symbols, and numbers,
as well as to selectively designate how many of each you wish to look
for.  By combining such pattern designations into what is called a
``Regular Expression'' you can look for such things as phone numbers,
chemical formulas, social security numbers, dates, accounting amounts,
names entered in more than one form, ranges of years, text formatting
patterns, and so on.

As REX is also supplied with the Texis package as a separate utility,
the next chapter is devoted to a detailed account of all of
\verb`REX's` syntax and features, and can be studied to learn how to
designate complex regular expressions and how to use it to accomplish
tasks outside a normal search envirnoment.

While a complete understanding is not required for the casual
searcher, the better you understand how to describe expressions using
\verb`REX` syntax, the more you will be able to make use of it,
in or outside Texis or a Metamorph search application.

\verb`REX` can be used in the following ways, where the same rules of
syntax apply to all:

\begin{itemize}

\item \verb`REX` expressions can be entered as query items,
following a forward slash \verb`/`.

\item \verb`REX` expressions can be entered in a query following a
\verb`w/` designation to dynamically define a special pattern to
delimit your Metamorph query.

\item \verb`REX` expressions can be used as part of functions in a
Vortex program, in the use of the functions \verb`rex` and
\verb`sandr` (search and replace) and the start and end delimiter
expressions \verb`sdexp` and \verb`edexp`.

\item \verb`REX` can be used as a stand-alone utility outside of a
Texis or Metamorph application, to do such things as change file
formats with Search and Replace, search through excerpted report files
to pull out specific items of interest, or to create lists of headers.

\end{itemize}

While this is not intended as a complete list, by way of example, some
of the ranges of characters one can delineate with \verb`REX's` syntax
follow.

\begin{tabbing}
\verb`\alpha`xx \= Matches any alpha character; \verb`[A-Z]` or \verb`[a-z]`.  \kill
\verb`\alpha`   \> Matches any alpha character; \verb`[A-Z]` or \verb`[a-z]`.    \\
\verb`\upper`   \> Matches any upper case alpha character; \verb`[A-Z]`.  \\
\verb`\lower`   \> Matches any lower case alpha character; \verb`[a-z]`.  \\
\verb`\digit`   \> Matches any numeric character; \verb`[0-9]`.           \\
\verb`\alnum`   \> Any alpha or any numeric character; \verb`[A-Z]` or \verb`[a-z]` or \verb`[0-9]`.  \\
\verb`\space`   \> Any space character; [space,return,linefeed,tab,formfeed,vertical-tab].  \\
\verb`\punct`   \> Any punctuation; [not control and not space and not alphanumeric].  \\
\verb`\print`   \> Any printable character; [all of the above].  \\
\verb`\cntrl`   \> Any control character.   \\
\verb`\R`       \> Respect case.            \\
\verb`\I`       \> Ignore case.             \\
\verb`\Xnn`     \> Matches hexadecimals.
\end{tabbing}

\subsection{Examples}

\begin{itemize}
\item \verb`"/\alpha+-=\alpha+"`:  Looks for one or more occurrences of a
    letter (i.e., any word) followed by one occurrence of a hyphen (designated
    by the equal sign (\verb`=`), followed by one or more occurrences of a letter
    (i.e., a word); and as such, can be used to locate hyphenated words.

\item \verb`"/cost=\space+of=\space+living="`:  Looks for the word ``\verb`cost`''
    followed by one or more of any space character (i.e., a space or a carriage
    return), followed by the word ``\verb`of`'', followed by one or more of any space
    character, followed by the word ``\verb`living`''; and as such, would locate the
    phrase ``\verb`cost of living`'', regardless of how it had been entered or formatted
    in terms of space characters.

\item \verb`"/\digit{1,6}\.=\digit{2}"`:  Looks for from 1 to 6 digits followed
    by a decimal point.  `\verb`.`' is a special character in \verb`REX` syntax and
    so must be preceded with a backward slash in order to be taken literally), followed
    by 2 digits; and as such would locate dollar type amounts and numbers with
    a decimal notation of 2 places.
\end{itemize}

\subsection{Examples of Some Useful REX Expressions}

\begin{itemize}
\item To locate phone numbers:
\begin{verbatim}
1?\space?(?\digit\digit\digit?)?[\-\space]?\digit{3}-\digit{4}
\end{verbatim}

\item To locate social security numbers:
\begin{verbatim}
\digit{3}-\digit{2}-\digit{4}
\end{verbatim}

\item To locate text between parentheses:
\begin{verbatim}
(=[^()]+)      <- without direction specification
     or
>>(=!)+)       <- with direction specification
\end{verbatim}

\item To locate paragraphs delimited by an empty line and 5 spaces:
\begin{verbatim}
>>\n\n\space{5}=!\n\n\space{5}+\n\n\space{5}
\end{verbatim}

\item To locate numbers in scientific notation; e.g., ``\verb`-3.14 e -21`'':
\begin{verbatim}
[+\-]?\space?\digit+\.?\digit*\space?e?\space?[+\-]?\space?\digit+
\end{verbatim}
\end{itemize}

You can formulate patterns of things to look for using these types of
patterns.  You can look for a \verb`REX` expression by itself, or in
proximity to another search item.  Such a search could combine a
\verb`REX` expression in union with an intelligent concept search.
For example, you could enter the following in a query input box:

\begin{verbatim}
     "/\digit{2}%" measurement
\end{verbatim}

The \verb`REX` expression indicates 2 occurrences of any digit
followed by a percent sign.  ``\verb`Measurement`'' will be treated as
an English root word with its list of equivalences, and passed to
\verb`PPM`.

In this search, Metamorph will look for an intersection of both
elements inside the specified delimiters, and may come up with a hit
such as:

\begin{quote}

     They {\bf estimated} that only {\bf 65\%} of the population
     showed up to vote.

\end{quote}

where ``\verb`estimated`'' was associated with ``\verb`measurement`'',
and ``\verb`65%`'' was associated with the pattern
``\verb`\digit{2}%`''.

\section{Misspellings, Typos, and Pattern Approximations (XPM)}

\subsection{Searching for Approximations}

In any search environment there is always a fine line between
relevance and irrelevance.  Any configuration aims to allow just
enough abstraction to find what one is looking for, but not so much
that unwanted hits become distracting.  Speed is also an important
consideration; one does not want to look for so many possibilities
that the search is overly burdened and therefore too slow in response
time.

If a spelling checker were run into every Metamorph search, not only
would the general search time be greatly impeded, but a lot of what
can be referred to as ``noise'' would deflect the accuracy, or
relevancy of the search results.  The aim of Metamorph is to allow
maximum user control and direction of the search.  Since there is no
requirement to conform to any spelling standard, Metamorph is able to
accept completely unknown words and process them accordingly:  this
includes slang, acronyms, code, or technical nomenclature.  Even so,
this does not deal with the issue of misspellings or typos.

Metamorph thoroughly handles this problem through the use of
\verb`XPM`, Metamorph's ApproXimate Pattern Matcher.  The intent
behind \verb`XPM` is that you haven't found what you believe you
should have found, and are therefore willing to accept patterns which
deviate from your entered pattern by a specified percentage.  The
percentage entered on the query line is the percentage of proximity to
the entered pattern (rather than the percent of deviation).

\subsection{XPM Rules of Syntax}

\begin{itemize}
\item The syntax for \verb`XPM` is to enter a percent sign (\verb`%`) followed
    by a two digit number from \verb`01` to \verb`99` representing percentage of proximity,
    followed by the pattern you wish, as:  \verb`%72Raygun`, to find
    ``\verb`Reagan`'' . If no numbers are listed after the percent sign, the
    default of \verb`80%` will be used; as, \verb`%lithwania`, looks for an
    \verb`80%` match and will find ``\verb`Lithuania`''.

\item \verb`XPM` is not a stand-alone tool; it can only be used from within
    a Metamorph query.  It can be used in intersection with other
    designated words, expressions, or \verb`XPM` patterns.

\item You can designate a logic operator in front of an \verb`XPM` pattern `\verb`+`'
    or `\verb`-`'; do not leave a space between the operator and the percent sign; as:
    \verb`+%72Raygun`.  It does not need to be put in quotes.

\item \verb`XPM` is case insensitive just as are other Metamorph
    special searches.

\item There is no way to search for an approximated \verb`REX` expression; either
    \verb`REX` or \verb`XPM` will be called by Metamorph.  Use \verb`XPM` in front
    of words or otherwise fixed length patterns not inclusive of \verb`REX` syntax.
\end{itemize}

Let us say you are looking for something that happened in Reykjavik
last week, and you are almost certain it is in your file somewhere.
There is such a reference in the demo news file which is shipped with
the program, so you can try this.  Perhaps you specified on the
query line ``\verb`event Rakechavick`'' but got no
hit, as you were not spelling the name correctly.  You can enter the
same search, but call up \verb`XPM` for the word you don't know how to
spell.  For example:

\begin{verbatim}
     event %64Rakechavick
\end{verbatim}

This query will look for an intersection of the word ``\verb`event`''
(plus all its equivalences) and a \verb`64%` approximation to the
entered pattern ``\verb`Rakechavick`''.  This will in fact
successfully locate a hit which discusses ``\verb`events`'' which
occurred at ``\verb`Reykjavik`''.

When looking for this sort of thing, you can keep lowering the
specified percentage until you find what you want.  You'll notice that
the lower the specified proximity, the more ``noise'' you allow;
meaning that in this case you will allow many patterns in addition to
``\verb`Reykjavik`'', as you are telling the program to look for
anything at all which approximates \verb`64%` of the entered pattern.

Such a facility has many applications.  Probably the most common use
for \verb`XPM` is when looking for proper nouns that have either
unknown or multiple spellings.  ``\verb`Qadhafi`'' is an example of a
name which is in the news often, and has several different completely
accepted spellings.  Someone for whom English is a second language can
much more successfully search for things he cannot spell by calling up
\verb`XPM` when necessary with the percent (\verb`%`) sign.  And in
instances where there are file imperfections such as human typos or
OCR scanning oddities, \verb`XPM` will call up the full range of
possibilities, which can be very useful in catch-all batchmode
searching, or otherwise.


\section{Numeric Quantities Entered as Text (NPM)}

\verb`NPM`, the Numeric Pattern Matcher, is one of several pattern
matchers that can be called by the user in sending out a Metamorph
query.  It is signified by a pound sign `\verb`#`' in the starting
position, in the same way that the tilde `\verb`~`' calls \verb`SPM`,
a percent sign `\verb`%`' calls \verb`XPM`, a forward slash `\verb`/`'
calls \verb`REX`, and no special character in the first position
(where there are equivalences) calls \verb`PPM` or \verb`SPM`.

There are still many numeric patterns that are best located with a
\verb`REX` expression to match the range of characters desired.
However, when you need the program to interpret your query as a
numeric quantity, use \verb`NPM`.  \verb`NPM` does number crunching
through all possible numbers found in the text to locate those numbers
which are in the specified range of desired numbers.  Therefore where
a lot of numeric searching is being done you may find that a math
co-processor can speed up such searches.

Since all numbers in the text become items to be checked for numeric
validity, one should tie down the search by specifying one or more
other items along with the \verb`NPM` item.  For example you might
enter on the query line:

\begin{verbatim}
     cosmetic sales $ #>1000000
\end{verbatim}

Such a search would locate a sentence like:

\begin{quote}
     {\bf Income} produced from {\bf lipstick} brought the company
     {\bf \$}{\bf 4,563,000} last year.
\end{quote}

In this case ``\verb`income`'' is located by \verb`PPM` as a match to
``\verb`sales`'', ``\verb`lipstick`'' is located by \verb`PPM` as a
match to ``\verb`cosmetic`'', the English character ``\verb`$`''
signifying ``\verb`dollars`'' is located by \verb`SPM` as a match to
``\verb`$`'', and the numeric quantity represented in the text as
``\verb`4,563,000`'' is located by \verb`NPM` as a match to
``\verb`#>1000000`'' (a number greater than one million).  Another
example:

\begin{verbatim}
     cosmetic sales $ #>million
\end{verbatim}

Even though one can locate the same sentence by entering the above
query, it is strongly recommended that searches entered on the query
line are entered as precise numeric quantities.  The true intent of
\verb`NPM` is to make it possible to locate and treat as a numeric
value information in text which was not entered as such.

You would find the above sentence even without specifying the string
``\verb`$`'', but realize that the dollar sign (\verb`$`) in the text
is not part of the numeric quantity located by \verb`NPM`.  There may
be cases where it is important to specify both the quantity and the
unit.  For example, if you are looking for quantities of coal, you
wouldn't want to find coal pricing information by mistake.  Compare
these two searches:

\begin{verbatim}
     Query1:  Australia coal tons #>500
     Query2:  Australia coal $ #>500
\end{verbatim}

The first would locate the sentence:

\begin{quote}
     Petroleum Consolidated mined {\bf 1200} {\bf tons} of {\bf coal}
     in {\bf Australia}.
\end{quote}

The second would locate the sentence:

\begin{quote}

     From dividends paid out of the {\bf \$}{\bf 3.5} million profit in the
     {\bf coal} industry, they were able to afford a vacation in {\bf Australia}.

\end{quote}

     Some units, such as kilograms, milliliters, nanoamps, and such, are
understood by \verb`NPM` to be their true value; that is, in the first case,
\verb`1000 grams`.  Use \verb`NPMP` to find out which units are understood and
how they will be interpreted.  The carrot mark (\verb`^`) shows where the parser
stops understanding valid numeric quantities.  Note that an abbreviation such
as ``\verb`kg`'' is not understood as a quantity, but only a unit; therefore,
``\verb`5 kilograms`'' has a numeric quantity of \verb`5000` (grams), where
``\verb`5 kg`'' has a numeric quantity of \verb`5` (kg's).

     Beware of entering something that doesn't make sense.  For example, a
quantity cannot be less than 6 and greater than 10 at the same time, and
therefore ``\verb`#<6>10`'' will make the controlfile sent to the engine unable to be
processed.

     Do not enter ambiguity on the query line; \verb`NPM` is intended to deal with
ambiguity in the text, not in the query.  The safest way to enter \verb`NPM` searches
is by specifying the accurate numeric quantity desired.  Example:
\begin{verbatim}
     date #>=1980<=1989
\end{verbatim}
This query will locate lines containing a date specification and a year, where
one wants only those entries from the 1980's.  It would also locate dates in legal
documents which are spelled out.  Example:
\begin{verbatim}
     retirement benefits age #>50<80
\end{verbatim}
This query will locate references about insurance benefits which reference
age 54, 63, and so on.  Reflecting the truer intent of \verb`NPM`, a sentence like
the following could also be retrieved.

\begin{quote}
     At {\bf fifty-five} one is {\bf awarded} the company's special
     {\bf Golden} {\bf Age} program.
\end{quote}

     In the event that a numeric string contains a space, it must be in quotes
to be interpreted correctly.  So, although it is strongly not recommended, one
could enter the following:
\begin{verbatim}
     revenue "#>fifty five"
\end{verbatim}
With this, you can locate references like the following example.

\begin{quote}
     Their corporate gross {\bf income} was \${\bf 1.4 million} before
     they merged with Acme Industrial.
\end{quote}

Keep in mind that an \verb`NPM` Search done within the context of
Metamorph relies upon occurrences of intersections of found items
inside the specified text delimiters, just as any Metamorph search.
It is still not a database tool.  The Engine will retrieve any hit
which satisfies all search requirements including those which contain
additional numeric information beyond what was called for.

In an application where Metamorph Hit Markup has been enabled, exactly
what was found will be highlighted.  This is the easiest way to get
feedback on what was located to satisfy search requirements.  If there
are any questions about results, review basic program theory and
compare to the other types of searches as given elsewhere in this
chapter.

\section{Designating Logic Operators (+) and (-)}

Searches can be weighted by indicating those sets you ``must include''
with a plus sign (\verb`+`) and those sets ``not to include'' with a
minus sign (\verb`-`).  Those sets not so marked have the default
designation of an equal sign (\verb`=`), which means all such sets
have an equal weight.  The must include (\verb`+`) and must not
include (\verb`-`) designations are outside the intersection quantity
count; intersections are calculated based on the number of
intersections of unmarked or equal (\verb`=`) sets you are looking
for.

In Metamorph terms we refer to an equally weighted set (\verb`=`) as
``set logic''; a ``must include'' set (\verb`+`) as ``and logic''; and
a ``must not include'' set (\verb`-`) as ``not logic''.  These
definitions should not be confused with Boolean terms, as although the
definitions overlap, they are not identical.  Traditional ``or'' logic
can be assigned by using the ``\verb`@0`'' designation on the query
line, denoting zero intersections of the unmarked sets.

When a (\verb`+`) or (\verb`-`) set is designated, remember that it
applies to the whole set; not just the word you have marked.  Example:

\begin{verbatim}
     @1 disease blood skin +infection -bandaid
\end{verbatim}

The above query specifying intersections at one (\verb`@1`) means that
you are looking for one intersection (\verb`@1`) of anything from the
set of words associated with ``\verb`disease`'', ``\verb`blood`'', and
``\verb`skin`''; and of those hits, you only want those containing
something from the set of words associated with ``\verb`infection`'';
but you would rule the hit out if it contained anything from the set
of words associated with ``\verb`bandaid`''.

You can designate any set entered on the query line as `\verb`+`' or
`\verb`-`'; therefore this applies as much to wildcard (\verb`*`),
\verb`REX`, \verb`XPM`, \verb`NPM` expressions, and macros, as it does
to words.  Example:

\begin{verbatim}
     power struggle -%70Raygun
\end{verbatim}

This finds all references to \verb`power` and \verb`struggle` (and
their equivalences) but filters out any references to \verb`70%`
approximation to the pattern ``\verb`Raygun`'' (i.e., it would omit
references to hits containing the word ``\verb`Reagan`'').

The important rule to remember about assigning `\verb`+`' or
`\verb`-`' operators is that you cannot look for only minuses
(\verb`-`).

This chapter has attempted to cover the types of items which comprise
a Metamorph query.  Logic operators can be used to add special
weighting to any of those things which will be viewed as single sets.
Therefore you can assign a `\verb`+`' or `\verb`-`' to any of the
types of query items that are described herein; and realize that with
no other such marking, any search item is understood to be given an
equal `\verb`=`' weighting.

