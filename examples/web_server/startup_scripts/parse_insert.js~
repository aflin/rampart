/* make printf et. al. global */
rampart.globalize(rampart.utils);

/* load the html module */
var html=require("rampart-html");

function hparse(file, tofile){
    var res=readFile(file);
    var hres=html.newDocument(res,{"indent":true,wrap:120});
    var body = hres.findTag("body");
    var acscript = body.findAttr("id=rampart-search");

    if(!acscript.length) {
        body.append('<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.devbridge-autocomplete/1.4.11/jquery.autocomplete.min.js"></script>');
        body.append('<script id="rampart-search" src="_static/rsearch.js"></script>');
        printf("saving changes to %s\n",tofile);
        fprintf(tofile, "%s", hres.prettyPrint());
    }

    var h = hres.findTag("html");

    t=hres.findClass("section");
    
    var els=[];

    function getSectText(el)
    {
        var c=el.children();
        var isSection=c.hasClass("section");
        var isH=c.hasTag(['h1','h2','h3','h4']);
        var ret="";
        var i=0;

        for (i=0; i<c.length; i++)
        {
            
            if( ! isSection[i] && ! isH[i] ) {
                if(i)
                    ret += "\n" + c.eq(i).toText();
                else
                    ret = c.eq(i).toText();
            }
        }
        return ret;
    }

    function getSectHtml(el)
    {
        body.append("<div id='tempdiv'>");
        var temp = body.findAttr("id=tempdiv");
        temp.append(el);
        el = temp.findClass("section").eq(0);
        el.findClass("section").delete();
        var ret = el.toHtml();
        temp.delete();
        return ret[0];
    }

    for (i=0; i<t.length; i++)
    {
        var e=t.eq(i);

        if     ( e.findTag('h1').length==1 )
            els.push({title: e.findTag('h1').toText()[0], id: e.getAttr("id")[0], level:1, text: getSectText(e), html: getSectHtml(e)});
        else if( e.findTag('h2').length==1 )
            els.push({title: e.findTag('h2').toText()[0], id: e.getAttr("id")[0], level:2, text: getSectText(e), html: getSectHtml(e)});
        else if( e.findTag('h3').length==1 )
            els.push({title: e.findTag('h3').toText()[0], id: e.getAttr("id")[0], level:3, text: getSectText(e), html: getSectHtml(e)});
        else if( e.findTag('h4').length==1 )
            els.push({title: e.findTag('h4').toText()[0], id: e.getAttr("id")[0], level:4, text: getSectText(e), html: getSectHtml(e)});
        
    }

    return els;
}

rampart.utils.copyFile(
    process.scriptPath + "/jquery.autocomplete.js",
    process.scriptPath + "/html/_static/jquery.autocomplete.js",
    true
);

var Sql = require("rampart-sql");
var sql = new Sql.init(process.scriptPath + "/docdb",true);

var res = sql.exec("select * from SYSTABLES where NAME = 'sections'");
if(res.rowCount)
{
    sql.exec("drop table sections;");
}

sql.exec("create table sections (title varchar(16), full varchar(64), plink varchar(32), level int, text varchar(128), html varchar(256) );");

var files = readdir(process.scriptPath + "/html/").filter(function(dir){ return /\.html/.test(dir); });

for (var j=0; j<files.length;j++) {
    var file=files[j];
    var els = hparse(process.scriptPath + "/unproc/"+file, process.scriptPath + "/html/"+file);
printf("parsing page %s\n",file);
    var lastlevel=1;
    var fullpath=[];
    for (i=0; i<els.length; i++)
    {
        var el=els[i];
        var indent=(el.level-1) * 4;
        var title = el.title.replace(/ Â¶ /,"").toLowerCase();
        fullpath[el.level-1] = title;
        fullname = fullpath.slice(0,el.level).join(' : ')
        link = file + "#" + title.replace(/[ \.\/]/g,'-').replace(/[\(\)]/g,'');

        //printf("SECTION %s, level:%d, length %d\n", link, el.level, el.text.length);
        //printf("%*P\n%!*P\n", indent, title, indent+2, el.text);

        sql.exec(
            "insert into sections values(?, ?, ?, ?, ?, ?);",
            [title, fullname, link, el.level, el.text, el.html]
        );
    }
}
sql.set({
    keepNoise: true
});
sql.exec("create index sections_title_x on sections(title);");
sql.exec("create fulltext index sections_full_text_mmix on sections(full\\text) " +
         "WITH WORDEXPRESSIONS "+
         "('[\\alnum\\x80-\\xFF]{2,99}', '[\\alnum\\x80-\\xFF\\(\\)\\%\\-\\_]{2,99}') "+
         "INDEXMETER 'on'"
);

