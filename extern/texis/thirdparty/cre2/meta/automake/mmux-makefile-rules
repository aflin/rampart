# mmux-makefile-rules -- -*- mode: makefile-automake -*-
#
# This file is to be included in the main "Makefile.am" with the directive:
#
#   include $(top_srcdir)/meta/automake/mmux-makefile-rules
#

# The following  regexp has been  generated under emacs  by evaluating
# this form:
#
#   (regexp-opt
#     '("ccname_alloc"
#     "ccname_delete"
#     "ccname_final"
#     "ccname_iface_method"
#     "ccname_iface_method_type"
#     "ccname_iface_new"
#     "ccname_iface_new_type"
#     "ccname_iface_table"
#     "ccname_iface_table_type"
#     "ccname_init"
#     "ccname_is"
#     "ccname_method"
#     "ccname_method_type"
#     "ccname_new"
#     "ccname_release"
#     "ccname_table"
#     "ccname_table_type"
#     "ccname_type")
#     'symbols)
#
AM_ETAGSFLAGS		= $(MMUX_DEPENDENCIES_INCLUDES) \
	--regex='{c}/"\\_<\\(ccname_\\(?:alloc\\|delete\\|final\\|i\\(?:face_\\(?:method\\(?:_type\\)?\\|new\\(?:_type\\)?\\|table\\(?:_type\\)?\\)\\|nit\\|s\\)\\|method\\(?:_type\\)?\\|new\\|\\(?:releas\\|t\\(?:abl\\(?:e_typ\\)?\\|yp\\)\\)e\\)\\)\\_>"/'


#### testing under GDB

$(builddir)/.gdbinit:
	ln -sv "$(top_srcdir)/gdbinit" "$(builddir)/.gdbinit"

# This rule is meant to be used as:
#
#   $ make all gdb-test FILE=tests/inspection CFLAGS='-g'
#
# after having created an appropriate file "$(top_srcdir)/.gdbinit".
#
gdb-test: $(builddir)/.gdbinit
	libtool --mode=execute gdb $$FILE


#### Valgrind analysis
#
# First do this:
#
#   make clean
#   make CFLAGS='-O0 -g' all check
#
# To use this rule on the file "tests/standard-allocator" we do:
#
#   make valgrind file=standard-allocator
#

VALGRIND_PROGRAM	= valgrind
VALGRIND_FLAGS		= --leak-check=yes --track-origins=yes
VALGRIND_FULL_FLAGS	= $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all

.PHONY: valgrind valgrind-full

valgrind:
	for f in $(builddir)/tests/$(file) ; \
	do $(LIBTOOL) --mode=execute $(VALGRIND_PROGRAM) $(VALGRIND_FLAGS) $$f ; \
	done

valgrind-full:
	for f in $(builddir)/tests/$(file) ; \
	do $(LIBTOOL) --mode=execute $(VALGRIND_PROGRAM) $(VALGRIND_FULL_FLAGS) $$f ; \
	done


#### Static analysis with Clang's Static Analyzer
#
# See the documentation for the command line tool at:
#
#    <http://clang-analyzer.llvm.org/scan-build.html>
#
# To run the tool we must do:
#
#    $ make clean
#    $ make clang-static-analysis
#
# The  program  "scan-build"  works  by  overriding  the  CC  and  CXX
# environment variables.
#

.PHONY: clang-static-analysis

clang-static-analysis:
	scan-build make

### end of file
